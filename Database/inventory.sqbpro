<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="D:\Wholesale-Inventory-System\Database\inventory.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="3495"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainOrders"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Delivery_Expenses" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="113"/><column index="2" value="90"/><column index="3" value="78"/><column index="4" value="132"/><column index="5" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Discounts" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="118"/><column index="2" value="144"/><column index="3" value="90"/><column index="4" value="165"/><column index="5" value="108"/><column index="6" value="137"/><column index="7" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Inventory_Updates" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="104"/><column index="2" value="124"/><column index="3" value="124"/><column index="4" value="133"/><column index="5" value="116"/><column index="6" value="123"/><column index="7" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Khata" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="52"/><column index="2" value="144"/><column index="3" value="83"/><column index="4" value="98"/><column index="5" value="183"/><column index="6" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Order_Items" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="142"/><column index="2" value="90"/><column index="3" value="124"/><column index="4" value="84"/><column index="5" value="147"/><column index="6" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Orders" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="1" mode="0"/></sort><column_widths><column index="1" value="90"/><column index="2" value="144"/><column index="3" value="124"/><column index="4" value="226"/><column index="5" value="132"/><column index="6" value="93"/></column_widths><filter_values/><conditional_formats><column index="3"/></conditional_formats><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Payments" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="117"/><column index="2" value="144"/><column index="3" value="90"/><column index="4" value="124"/><column index="5" value="126"/><column index="6" value="136"/><column index="7" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="88"/><column index="2" value="180"/><column index="3" value="83"/><column index="4" value="52"/><column index="5" value="84"/><column index="6" value="93"/><column index="7" value="162"/><column index="8" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Shopkeepers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="52"/><column index="2" value="114"/><column index="3" value="124"/><column index="4" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="InventoryTable.sql">SELECT 
    P.SKU,
    P.Name,
    P.Brand,
    P.Size,
    P.Quantity,
    P.Price,
    P.Last_Updated,
    CASE 
        WHEN P.Quantity &lt; 10 THEN 'Low Stock' 
        ELSE 'Sufficient Stock' 
    END AS Stock_Status,
    -- Total number of inventory updates for this product
    (SELECT COUNT(*) 
     FROM Inventory_Updates IU 
     WHERE IU.Product_SKU = P.SKU) AS Update_Count,
    -- Date of the most recent inventory update
    (SELECT MAX(IU.Update_Date) 
     FROM Inventory_Updates IU 
     WHERE IU.Product_SKU = P.SKU) AS Last_Update_Date,
    -- Total quantity returned for this product (if any)
    COALESCE(
      (SELECT SUM(R.Quantity_Returned) 
       FROM Returns R 
       WHERE R.Product_SKU = P.SKU), 0) AS Total_Returned
FROM Products P;
</sql><sql name="OrderTableQ.sql">SELECT 
    O.Order_ID,
    SK.Name AS Shopkeeper_Name, 
    SM.Name AS Salesman_Name, 
    O.Order_Date, 
    O.Total_Amount, 
    OI.Order_Item_ID, 
    P.Name AS Product_Name, 
    P.Brand, 
    P.Size, 
    OI.Quantity, 
    OI.Price
FROM Orders O
JOIN Order_Items OI ON O.Order_ID = OI.Order_ID
JOIN Shopkeepers SK ON O.Shopkeeper_ID = SK.ID
JOIN Salesmen SM ON O.Salesman_ID = SM.ID
JOIN Products P ON OI.Product_SKU = P.SKU;
</sql><sql name="PaymentTable.sql">SELECT 
    K.ID AS Khata_ID,
    SK.Name AS Shopkeeper_Name,
    K.Brand,
    K.Total_Due,
	P.Amount_Paid,
    K.Last_Payment_Date,
    O.Order_Date,
    P.Payment_Date,
	SM.Name AS Salesman_Name
FROM Khata K
JOIN Payments P ON K.Shopkeeper_ID = P.Shopkeeper_ID
JOIN Shopkeepers SK ON K.Shopkeeper_ID = SK.ID
JOIN Salesmen SM ON P.Salesman_ID = SM.ID
JOIN Orders O ON P.Order_ID = O.Order_ID;
</sql><sql name="productTable.sql">SELECT 
    SKU, 
    Name, 
    Brand, 
    Size, 
    Quantity, 
    Price AS &quot;Total Price&quot;, 
    ROUND(Price / NULLIF(Quantity, 0), 2) AS &quot;Per Item Price&quot;
FROM Products;
</sql><sql name="returnsTable.sql">WITH ReturnAmounts AS (
    -- Calculate total return value per order considering multiple items
    SELECT 
        r.Order_ID, 
        SUM(r.Quantity_Returned * (oi.Price / oi.Quantity)) AS Total_Return_Value
    FROM Returns r
    JOIN Order_Items oi 
        ON r.Order_ID = oi.Order_ID 
        AND r.Product_SKU = oi.Product_SKU
    GROUP BY r.Order_ID
)
SELECT 
    o.Order_ID, 
    s.Name AS Shopkeeper_Name, 
    sm.Name AS Salesman_Name, 
    o.Order_Date, 
    o.Total_Amount AS Original_Order_Total, 
    COALESCE(ra.Total_Return_Value, 0) AS Total_Returns, 
    (o.Total_Amount - COALESCE(ra.Total_Return_Value, 0)) AS Updated_Order_Total
FROM Orders o
JOIN Shopkeepers s ON o.Shopkeeper_ID = s.ID
JOIN Salesmen sm ON o.Salesman_ID = sm.ID
LEFT JOIN ReturnAmounts ra ON o.Order_ID = ra.Order_ID
ORDER BY o.Order_Date DESC;
</sql><sql name="shopkeeperTable.sql">SELECT s.ID, s.Name, k.Brand, s.Contact_Info, 
                       COALESCE(k.Total_Due, 0) AS Total_Due,
                       COALESCE(SUM(p.Amount_Paid), 0) AS Paid_Amount,
                       (COALESCE(k.Total_Due, 0) - COALESCE(SUM(p.Amount_Paid), 0)) AS Remaining,
                       MAX(p.Payment_Date) AS Last_Submission, s.IsDeleted
                FROM Shopkeepers s
                LEFT JOIN Khata k ON s.ID = k.Shopkeeper_ID
                LEFT JOIN Payments p ON s.ID = p.Shopkeeper_ID
                GROUP BY s.ID, s.Name, s.Contact_Info, k.Brand, k.Total_Due</sql><sql name="SQL 8">SELECT SUM(oi.Price)*d.Discount_Amount/100 AS Total_Amount, d.Discount_Amount
            FROM Order_Items oi
            LEFT JOIN Discounts d ON oi.Order_ID = d.Order_ID
            WHERE oi.Order_ID = 25 AND oi.IsDeleted = 0;
			
SELECT o.Order_ID,o.Order_Info, s.Name AS Shopkeeper, sm.Name AS Salesman, o.Order_Date, o.Total_Amount, d.Discount_Amount
            FROM Orders o
            JOIN Shopkeepers s ON o.Shopkeeper_ID = s.ID
            JOIN Salesmen sm ON o.Salesman_ID = sm.ID
            LEFT JOIN Discounts d ON o.Order_ID = d.Order_ID
            WHERE o.IsDeleted = 0</sql><sql name="SQL 9">SELECT o.Order_ID,o.Order_Info , s.Name AS Shopkeeper, sm.Name AS Salesman, o.Order_Date, o.Total_Amount, 
               (o.Total_Amount * d.Discount_Amount / 100) AS Discount_Amount, o.Total_Amount-(o.Total_Amount * d.Discount_Amount / 100) AS Grand_Total
            FROM Orders o
            JOIN Shopkeepers s ON o.Shopkeeper_ID = s.ID
            JOIN Salesmen sm ON o.Salesman_ID = sm.ID
            LEFT JOIN Discounts d ON o.Order_ID = d.Order_ID
            WHERE o.IsDeleted = 0
			
			SELECT * FROM Order_Items WHERE Order_ID = 37 AND IsDeleted = 0;
</sql><current_tab id="7"/></tab_sql></sqlb_project>
